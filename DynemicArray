import java.util.Arrays;

public class DynamicArray {
    private int[] array;
    private int size;

    // Конструктор, инициализирует массив начального размера 10
    public DynamicArray() {
        array = new int[10];
        size = 0;
    }

    // Метод для добавления элемента в конец массива
    public void add(int data) {
        ensureCapacity();
        array[size++] = data;
    }

    // Метод для добавления массива данных в конец нашего Динамического массива
    public void addArray(int[] arrAdd) {
        for (int data : arrAdd) {
            add(data);
        }
    }

    // Метод для добавления массива данных по индексу в наш Динамический массив
    public void addAtArray(int index, int[] arrAdd) {
        if (index < 0 || index > size) {
            throw new IndexOutOfBoundsException("Invalid index");
        }

        ensureCapacity(size + arrAdd.length);

        // Сдвигаем элементы вправо, чтобы освободить место для нового массива
        System.arraycopy(array, index, array, index + arrAdd.length, size - index);

        // Вставляем новый массив в указанный индекс
        for (int i = 0; i < arrAdd.length; i++) {
            array[index + i] = arrAdd[i];
        }

        size += arrAdd.length;
    }

    // Метод для удаления всех элементов из массива
    public void clean() {
        array = new int[10];
        size = 0;
    }

    // Метод для проверки, существует ли элемент в массиве
    public boolean contains(int data) {
        for (int i = 0; i < size; i++) {
            if (array[i] == data) {
                return true;
            }
        }
        return false;
    }

    // Метод для проверки, пуст ли массив
    public boolean isEmpty() {
        return size == 0;
    }

    // Метод для удаления элемента по его значению
    public boolean removeValue(int value) {
        for (int i = 0; i < size; i++) {
            if (array[i] == value) {
                removeAt(i);
                return true;
            }
        }
        return false;
    }

    // Вспомогательный метод для удаления элемента по индексу
    private void removeAt(int index) {
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException("Invalid index");
        }

        // Сдвигаем элементы влево
        System.arraycopy(array, index + 1, array, index, size - index - 1);
        size--;
    }

    // Вспомогательный метод для увеличения емкости массива при необходимости
    private void ensureCapacity() {
        if (size == array.length) {
            array = Arrays.copyOf(array, array.length * 2);
        }
    }

    // Перегруженный метод для увеличения емкости до заданного размера
    private void ensureCapacity(int minCapacity) {
        if (minCapacity > array.length) {
            array = Arrays.copyOf(array, minCapacity);
        }
    }

    // Метод для получения текущего размера массива
    public int size() {
        return size;
    }

    // Метод для получения элемента по индексу
    public int get(int index) {
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException("Invalid index");
        }
        return array[index];
    }

    // Метод для вывода массива на экран
    public void printArray() {
        System.out.println(Arrays.toString(Arrays.copyOf(array, size)));
    }

    public static void main(String[] args) {
        DynamicArray dynamicArray = new DynamicArray();

        dynamicArray.add(1);
        dynamicArray.add(2);
        dynamicArray.add(3);

        System.out.println("Array after adding elements:");
        dynamicArray.printArray();

        dynamicArray.addArray(new int[]{4, 5, 6});
        System.out.println("Array after adding an array:");
        dynamicArray.printArray();

        dynamicArray.addAtArray(2, new int[]{7, 8});
        System.out.println("Array after adding an array at index 2:");
        dynamicArray.printArray();

        System.out.println("Contains 3? " + dynamicArray.contains(3));

        System.out.println("Removing value 3: " + dynamicArray.removeValue(3));
        dynamicArray.printArray();

        System.out.println("Is empty? " + dynamicArray.isEmpty());

        dynamicArray.clean();
        System.out.println("Array after cleaning:");
        dynamicArray.printArray();
    }
}
